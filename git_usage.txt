2장 깃과 소스트리 설치 및 환경 설정

전체 명령어 도움말
$git help --all

버전
$git --version

여러개의 명령어
$git tag; git branch

현재의 환경 상태를 알기위한 명령어
$git config --global --list

이메일과 user.name 변경방법
$git config --global user.name "kim-jaejong"
$git config --global user.email "kjjongwinter@hanmail.net"

글로벌 환경설정 파일 위치 찾는법
$ls ~/.gitconfig
/c/Users/user/.gitconfig 에 있음

깃상태를 컬러로 보기
$git config --global color.ui auto

별칭만들기 예) log --graph --pretty=oneline 명령어를 show-graph 로
$git config -global alias.show-graph 'log --graph --pretty=oneline'


3장 깃 개념 잡기

깃의 논리 공간
작업하는 공간 working, 임시저장 공간 stage, 실제 저장 공간 repository

파일 스테이지 상태 파악
$git status

파일관리 목록에서 제외 - 파일명  .gitignore
저장소 폴더의 최상위 디렉터리에 지정
#로 시작하는 줄은 주석
경로가 있으면 경로명 지정
*기호를 사용하여 패턴을 정의
   예) *.obj
!제외하지 않는 파일 
   예) !config.php
/pub/ 디렉터리 안의 모든 것을 무시
   예) /pub/   (\가 아님)
doc 디렉터리 아래의 모든 .txt 파일 무시
   예) doc/**/*.txt

복제 명령
$git clone 원격저장소URL 새폴더이름

4장 커밋

스테이지에 등록 -> tracted 상태로 변경
$git add 파일 이름

전체 파일과 폴더를 모두 등록
$git add .

스테이지 영역에 등록하지 않은 파일은 커밋 작업에 포함되지 않는다.
폴더는 빈 폴더가 아닌 폴더 안에 파일이 하나 이상 있어야 등록이 가능하다.

파일 등록 취소 -> tracted 상태의 파일을 untracted 상태로 변경
$git rm --cashed 파일명

한번이라도 commit 했다면 reset 명령어를 사용해야 한다.
$git reset HEAD 파일명

소스트리에서는 모두 스테이지에서 내리기와 선택 내용 스테이지에서 내리기를 사용하면 untracted 상태로 쉽게 변경

작업 도중 등록된 파일이름을 변경해도 별도로 깃에 통보할 필요없다. 자동으로 변경된 파일을 tracked하고 있다.
$git mv index.htm home.htm
(단계적으로 풀면
$mv index.htm home.htm
$git rm index.htm
$git add home.htm

HEAD는 최종적인 커밋작업의 위치를 가리킨다.
새로운 커밋은 이전 부모 커밋을 기반으로 새로운 커밋을 만든다.
HEAD는 부모 커밋을 가리킨다. 깃을 설치하고 처음 커밋할 때는 HEAD의 포인터가 없다.
HEAD는 커밋할 때마다 한 단계씩 이동하고 마지막 위치를 가리키고 커밋이 변화한 최종 시점을 의미

새롭게 생성된 파일을 커밋하려면 반드시 tracted 상태로 변경해 주어야 한다.
파일을 변경하면 다시 재등록
커밋하기 전에는 status 로 항상 상태를 확인하는 습관
워킹디렉토리가 깨끗하게 정리되어 있어야 커밋 명령을 수행할 수 있다.

깃의 커밋은 HEAD와 스테이지 영역 간 차이를 비교하여 새로운 객체를 생성한다. 생성된 객체를 깃 저장소에 기록한다.

커밋은 스냅샷을 이용하여 새로 수정된 파일과 디렉터리를 묶는 트리 객체이다. 커밋을 하면 새로운 트리 객체로 변환하는 것과 유사하다.

커밋 메시지 
모든 커밋은 반드시 메시지를 같이 작성해야 한다.
커밋 명령어를 입력하면 메시지를 작성할 수 있는 화면이 나온다.

파일 등록과 커밋을 동시에 하는 방법
$git commit -a
-a 옵션은 커밋을 하기 전에 자동으로 모든 파일을 add(tracted)하는 과정을 미리 수행한다.

커밋을 하면 스테이지 영역은 초기화 된다.

로그 기록 확인
$git log

수정하는 과정에서 잘못 수정된 파일을 수정 전의 상태로 되돌리기 - 커밋 전 마지막 내용으로 돌리기
$git check out --파일명
수정파일을 되돌리면 이전 커밋 이후에 작업한 수정 내역은 모두 삭제한다.

간단한 커밋 메시지와 함께 커밋
$git commit -m "커밋 메시지"

워킹 디렉터리에 있는 파일을 스테이지 영역에 등록하고 간단한 메시지와 함께 커밋
$git commit -am "메시지"
이미 추적된 파일 상태가 변경되었을 때 가능하다. 

처음 새롭게 생성된 파일은 add명령을 수행 후 실행해야 한다.
$git add 파일이름
$git commit -am "메시지"

메시지가 없는 빈 커밋 --allow-empty-message 옵션 사용
$git commit --allow-empty-message -m ""

방금 전에 작성한 커밋 메시지를 수정할 때 --amend 옵션
$git commit --amend

간략 로그  --pretty=short
$git log --pretty=short

특정 커밋의 상세 정보 show 명령
$git show 커밋ID

특정 파일의 로그
$git log 파일명

-p 옵션 : diff 기능을 포함하여 출력
--stat 옵션 : 히스토리를 출력
--pretty=oneline 옵션 : 각 커밋을 한 줄로 표시

아직 add 명령으로 파일을 추가하지 않은 경우 워킹디렉토리와 스테이지 영역 간 변경 사항을 비교
$git diff

add는 했으나 (스테이지 영역에 있는) 수정된 파일을 아직 커밋하지 않았다면 최신 커밋과 비교
$git diff head

커밋할 때 메시지 작성용 에디터에 diff 내용을 추가 -v 옵션
$git commit -v

5장 서버

개별 깃 허브 주소
http://github.com/kim-jaejong


원격 저장소에 연결 - add 옵션
$ git remote add origin http://github.com/kim-jaejong/hnpna_doc
여기서 origin 은 원격저장소 별칭
         http://github.com/kim-jaejong/hnpna_doc 은 서버 주소
확인
$git remote -v

서버에 전송
$git push 원격저장소별칭 브랜치이름
$git push origin master

-----------------------------------------------
이미 존재하는 원격 저장소 origin을 수정
------------------------------------------------
1. 기존 원격 저장소 origin 제거
먼저 잘못된 원격 저장소 origin을 제거합니다:
git remote remove origin
2. 새로운 원격 저장소 origin 추가
그런 다음, 올바른 URL로 새로운 원격 저장소 origin을 추가합니다:
git remote add origin https://github.com/kim-jaejong/hnpna_doc.git

git remote -v
이 명령어는 현재 설정된 모든 원격 저장소 URL을 출력합니다. 출력 결과가 올바른 URL로 설정되었는지 확인하십시오.
-----------------------------------------------------
깃 허브에 만들어진 저장소를 삭제하는 방법
-------------------------------------------------------
ChatGPT
GitHub에서 저장소를 삭제하는 방법은 다음과 같습니다. 저장소를 삭제하면 복구할 수 없으므로 주의해야 합니다.

GitHub 저장소 삭제 방법
GitHub 웹사이트에 로그인:

GitHub 웹사이트에 접속하여 로그인합니다.
삭제할 저장소로 이동:

오른쪽 상단의 프로필 아이콘을 클릭하고 "Your repositories"를 선택합니다.
삭제하려는 저장소를 클릭하여 해당 저장소의 페이지로 이동합니다.
저장소 설정으로 이동:

저장소 페이지 상단의 메뉴에서 "Settings"를 클릭합니다.
저장소 삭제:

"Settings" 페이지 하단으로 스크롤합니다.
"Danger Zone" 섹션에서 "Delete this repository" 버튼을 찾습니다.
"Delete this repository" 버튼을 클릭합니다.
저장소 이름 확인 및 삭제:

저장소를 삭제하기 위해 저장소 이름을 입력하라는 메시지가 표시됩니다.
저장소 이름을 정확히 입력하고 "I understand the consequences, delete this repository" 버튼을 클릭합니다.

저장소 삭제 예시
1. 저장소 페이지로 이동

2. Settings 클릭

3. Danger Zone으로 스크롤

4. 저장소 이름 입력 및 삭제

이 과정을 완료하면 저장소가 영구적으로 삭제됩니다. 삭제된 저장소는 복구할 수 없으므로, 삭제 전에 중요한 데이터가 없는지 반드시 확인하시기 바랍니다.

----------------------------------------------------
원격 저장소 생성
----------------------------------------------------
저장소가 존재하지 않는다면 다음 단계에 따라 새 저장소를 생성합니다:

GitHub에 로그인:

GitHub 웹사이트에 로그인합니다.
저장소 생성:
오른쪽 상단의 "+" 버튼을 클릭하고 "New repository"를 선택합니다.
저장소 이름을 hnpna_doc으로 입력합니다.
기타 설정을 완료한 후 "Create repository" 버튼을 클릭합니다.

3. 로컬 저장소와 원격 저장소 연결
원격 저장소 URL을 올바르게 설정하고 저장소를 생성한 후, 로컬 저장소와 원격 저장소를 연결합니다:
git remote set-url origin https://github.com/kim-jaejong/hnpna_doc.git

4. 변경 내용 푸시
모든 설정이 올바르게 되었는지 확인한 후, 변경 내용을 원격 저장소에 푸시합니다:
git push -u origin master
이 단계를 통해 문제를 해결할 수 있습니다. 

---------------------------------------------------------
"Sign in with your browser" 메시지가 나타나는 경우
--------------------------------------------------------
 GitHub CLI 도구를 사용하여 인증이 필요할 때 발생할 수 있습니다.
GitHub와의 인증 문제를 해결하기 위해 다음 단계를 시도해보세요.

1. GitHub Personal Access Token 생성
GitHub 계정에서 Personal Access Token을 생성해야 합니다. 
이는 GitHub의 새로운 보안 정책에 따라 비밀번호 대신 사용됩니다.

---------------------------------------------
Personal Access Token 생성 방법:
-------------------------------------------------
GitHub에 로그인:
GitHub 웹사이트에 로그인합니다.

Settings로 이동:
오른쪽 상단의 프로필 아이콘을 클릭하고 "Settings"를 선택합니다.

Developer settings로 이동:
왼쪽 메뉴에서 "Developer settings"를 클릭합니다.

Personal access tokens 선택:
왼쪽 메뉴에서 "Personal access tokens"를 선택합니다.

Token 생성:
"Generate new token" 버튼을 클릭합니다.

토큰에 적절한 이름을 지정하고, 필요한 권한(예: repo 전체 권한)을 선택합니다.
"Generate token" 버튼을 클릭하여 토큰을 생성합니다.
생성된 토큰을 복사해 둡니다. 이 토큰은 다시 볼 수 없으므로 안전한 곳에 저장해 두어야 합니다.

----------------------------------------------------------
2. GitHub Personal Access Token을 사용하여 인증
----------------------------------------------------------
생성한 토큰을 사용하여 GitHub에 인증할 수 있습니다.

기존의 원격 URL을 업데이트
Git Bash에서 기존의 원격 URL을 업데이트합니다:
git remote set-url origin https://<TOKEN>@github.com/kim-jaejong/hnpna_doc.git
여기서 <TOKEN> 부분을 복사한 Personal Access Token으로 대체합니다.

GitHub에 로그인한 상태에서, 원격 저장소에 변경 사항을 푸시합니다:
git push -u origin master

-------------------------------------------------------------
3. GitHub CLI를 사용하여 로그인
-----------------------------------------------------------
GitHub CLI를 사용하여 GitHub에 로그인할 수도 있습니다. 이를 통해 인증을 보다 쉽게 관리할 수 있습니다.

GitHub CLI 설치 및 로그인

GitHub CLI 설치:
GitHub CLI를 공식 웹사이트에서 다운로드하여 설치합니다.

GitHub CLI 로그인:
설치 후 터미널을 열고 다음 명령어를 실행하여 GitHub에 로그인합니다:
gh auth login
프롬프트에 따라 GitHub 계정으로 로그인하고 인증을 완료합니다.

원격 저장소에 변경 사항 푸시:
GitHub CLI로 로그인한 후, 원격 저장소에 변경 사항을 푸시합니다:
git push -u origin master

------------------------------------------------------------------
4. Git 설정 파일 확인 및 수정
-------------------------------------------------------------------
Git 설정 파일을 확인하고, 필요한 경우 수동으로 인증 정보를 추가할 수 있습니다.

Git 설정 파일 수정

Git 설정 파일 열기:
Git 설정 파일을 텍스트 편집기(예: Visual Studio Code)로 엽니다:
git config --global -e

인증 정보 추가:
URL에 Personal Access Token을 포함하여 원격 URL을 추가합니다:
[remote "origin"]
    url = https://<TOKEN>@github.com/kim-jaejong/hnpna_doc.git

이 단계를 통해 GitHub와의 인증 문제를 해결하고, 원격 저장소에 변경 사항을 푸시할 수 있을 것입니다.

---------------------------------------------------------------
GitHub의 "Push Protection" 기능이 활성화되어 있고, 푸시하려는 커밋에 비밀 정보(예: API 키, Personal Access Token 등)가 포함되어 있어서 푸시가 차단된 것입니다. 이 기능은 실수로 민감한 정보를 공개 저장소에 푸시하는 것을 방지합니다.
---------------------------------------------------------------
에러 메시지를 보면, 문제의 원인은 git_usage.txt 파일의 특정 라인(177)에 포함된 GitHub Personal Access Token입니다.

문제 해결 방법

1. 비밀 정보 제거
커밋에서 비밀 정보를 제거하고 다시 푸시합니다. 아래 단계에 따라 비밀 정보를 제거하고 새로운 커밋을 생성합니다.

파일 수정:
git_usage.txt 파일을 열고 비밀 정보를 제거하거나 수정합니다.

수정된 파일 추가:
git add git_usage.txt

새로운 커밋 생성:
git commit --amend
--amend 플래그를 사용하여 마지막 커밋을 수정합니다. 이 커밋은 비밀 정보가 제거된 상태로 업데이트됩니다.

포스 푸시:
git push origin master --force

2. 비밀 정보가 포함된 커밋 제거
만약 특정 커밋을 삭제하고 싶다면, 다음 명령어를 사용합니다.

비밀 정보가 포함된 커밋 삭제:
git rebase -i HEAD~N
여기서 N은 삭제하고자 하는 커밋의 개수입니다. 이 명령어는 최근 N개의 커밋을 포함하는 대화형 리베이스 모드를 엽니다.

대화형 리베이스에서 커밋 제거:
텍스트 편집기가 열리면, 삭제하려는 커밋을 pick에서 drop으로 변경하거나 해당 커밋 라인을 삭제합니다.

변경사항 적용:
파일을 저장하고 닫으면, Git이 대화형 리베이스를 수행합니다.

포스 푸시:
git push origin master --force

추가적인 참고 사항
비밀 정보 제거 후 토큰 교체: 이미 유출된 토큰은 사용하지 않도록 하세요. GitHub에서 해당 토큰을 취소하고 새 토큰을 생성해야 합니다.
Push Protection 비활성화: 보안 위험이 크기 때문에 권장하지 않습니다. 그러나 조직의 관리자가 Push Protection 설정을 변경할 수 있습니다. 이는 보안 정책에 맞게 조정해야 합니다.
링크 참조
에러 메시지에서 제공된 링크를 참고하여 더 자세한 정보를 확인할 수도 있습니다:
GitHub Push Protection 정보

위 단계를 통해 문제를 해결하고 안전하게 푸시할 수 있습니다.


2장 깃과 소스트리 설치 및 환경 설정

전체 명령어 도움말
$git help --all

버전
$git --version

여러개의 명령어
$git tag; git branch

현재의 환경 상태를 알기위한 명령어
$git config --global --list

이메일과 user.name 변경방법
$git config --global user.name "kim-jaejong"
$git config --global user.email "kjjongwinter@hanmail.net"

글로벌 환경설정 파일 위치 찾는법
$ls ~/.gitconfig
/c/Users/user/.gitconfig 에 있음

깃상태를 컬러로 보기
$git config --global color.ui auto

별칭만들기 예) log --graph --pretty=oneline 명령어를 show-graph 로
$git config -global alias.show-graph 'log --graph --pretty=oneline'


3장 깃 개념 잡기

깃의 논리 공간
작업하는 공간 working, 임시저장 공간 stage, 실제 저장 공간 repository

파일 스테이지 상태 파악
$git status

파일관리 목록에서 제외 - 파일명  .gitignore
저장소 폴더의 최상위 디렉터리에 지정
#로 시작하는 줄은 주석
경로가 있으면 경로명 지정
*기호를 사용하여 패턴을 정의
   예) *.obj
!제외하지 않는 파일 
   예) !config.php
/pub/ 디렉터리 안의 모든 것을 무시
   예) /pub/   (\가 아님)
doc 디렉터리 아래의 모든 .txt 파일 무시
   예) doc/**/*.txt

복제 명령
$git clone 원격저장소URL 새폴더이름

4장 커밋

스테이지에 등록 -> tracted 상태로 변경
$git add 파일 이름

전체 파일과 폴더를 모두 등록
$git add .

스테이지 영역에 등록하지 않은 파일은 커밋 작업에 포함되지 않는다.
폴더는 빈 폴더가 아닌 폴더 안에 파일이 하나 이상 있어야 등록이 가능하다.

파일 등록 취소 -> tracted 상태의 파일을 untracted 상태로 변경
$git rm --cashed 파일명

한번이라도 commit 했다면 reset 명령어를 사용해야 한다.
$git reset HEAD 파일명

소스트리에서는 모두 스테이지에서 내리기와 선택 내용 스테이지에서 내리기를 사용하면 untracted 상태로 쉽게 변경

작업 도중 등록된 파일이름을 변경해도 별도로 깃에 통보할 필요없다. 자동으로 변경된 파일을 tracked하고 있다.
$git mv index.htm home.htm
(단계적으로 풀면
$mv index.htm home.htm
$git rm index.htm
$git add home.htm

HEAD는 최종적인 커밋작업의 위치를 가리킨다.
새로운 커밋은 이전 부모 커밋을 기반으로 새로운 커밋을 만든다.
HEAD는 부모 커밋을 가리킨다. 깃을 설치하고 처음 커밋할 때는 HEAD의 포인터가 없다.
HEAD는 커밋할 때마다 한 단계씩 이동하고 마지막 위치를 가리키고 커밋이 변화한 최종 시점을 의미

새롭게 생성된 파일을 커밋하려면 반드시 tracted 상태로 변경해 주어야 한다.
파일을 변경하면 다시 재등록
커밋하기 전에는 status 로 항상 상태를 확인하는 습관
워킹디렉토리가 깨끗하게 정리되어 있어야 커밋 명령을 수행할 수 있다.

깃의 커밋은 HEAD와 스테이지 영역 간 차이를 비교하여 새로운 객체를 생성한다. 생성된 객체를 깃 저장소에 기록한다.

커밋은 스냅샷을 이용하여 새로 수정된 파일과 디렉터리를 묶는 트리 객체이다. 커밋을 하면 새로운 트리 객체로 변환하는 것과 유사하다.

커밋 메시지 
모든 커밋은 반드시 메시지를 같이 작성해야 한다.
커밋 명령어를 입력하면 메시지를 작성할 수 있는 화면이 나온다.

파일 등록과 커밋을 동시에 하는 방법
$git commit -a
-a 옵션은 커밋을 하기 전에 자동으로 모든 파일을 add(tracted)하는 과정을 미리 수행한다.

커밋을 하면 스테이지 영역은 초기화 된다.

로그 기록 확인
$git log

수정하는 과정에서 잘못 수정된 파일을 수정 전의 상태로 되돌리기 - 커밋 전 마지막 내용으로 돌리기
$git check out --파일명
수정파일을 되돌리면 이전 커밋 이후에 작업한 수정 내역은 모두 삭제한다.

간단한 커밋 메시지와 함께 커밋
$git commit -m "커밋 메시지"

워킹 디렉터리에 있는 파일을 스테이지 영역에 등록하고 간단한 메시지와 함께 커밋
$git commit -am "메시지"
이미 추적된 파일 상태가 변경되었을 때 가능하다. 

처음 새롭게 생성된 파일은 add명령을 수행 후 실행
$git add 파일이름
$git commit -am "메시지"


